These notes were taken while reading and coding along with guides on 
  https://www.hackerearth.com/practice/algorithms/sorting

Index:
      )Bubble Sort
      )Selection Sort
      )Insertions Sort
      )Merge Sort
      )Quick Sort
      )Radix Sort
      )Heap Sort
      )Bucket Sort



)Bubble Sort
    Bubble sort is the idea of repeatedly comparing pairs of adjacent elements and swapping 
    their positions if they exist in the wrong order.

    If we assume array A[] is an unsorted array of 'n' elements, the pseudo-code is as follows:

      void bubble_sort(int A[], int n) {
        int tmp;
        for(int k = 0; k < n-1; k++) {

                              /* 'n-k-1' being used to ignore comparisons from previous iterations 
                                int k is used to count and 'n-k-1' is used to stop from making a
                                comparison of that last items, as we can assume the last two items 
                                were properly swapped during either the last or initial iteration 
                              
                              
                              */
          for(int i = 0; i < n-k-1; i++) {
            if(A[ i ] > A[ i+1 ]) {
              tmp = A[ i ];
              a[ i ] = A[ i+1 ];
              a[ i+1 ] = temp
            }
          }
        }
      }

    Given an array [7, 4, 5, 2]:

          7 and 4 are swapped       7 and 5 are swapped       7 and 2 are swapped
                /  \                        /  \                         /  \
      Step 1 - [7, 4, 5, 2]     =>      [4, 7, 5, 2]      =>      [4, 5, 7, 2]      =>      [4, 5, 2, 7]


              No swap                5 and 2 are swapped 
                /  \                        /  \  
      Step 2 - [4, 5, 2, 7]     =>      [4, 5, 2, 7]      =>                        =>      [4, 2, 5, 7]


          2 and 4 are swapped 
                /  \ 
      Step 3 - [4, 2, 5, 7]     =>                        =>                        =>      [2, 4, 5, 7]


  *Time Complexity of bubble-sort method is O(n**2) in both worst and average cases, because the entire
       array needs to be iterated for for every element.


)Selection Sort
    Selection sort method iterates through the array with a single nested for-loop. For each index, it 
    iterates through the array, finds the minimum value and swaps it into the current index/slot.

    Ex:
      void selection_sort(int A[ ], int n) {
        int minimum, tmp;

        for(int i = 0; i < n-1; i++) {
          minimum = i;

          for(int j = i+1; j < n; j++) {
            if(A[ j ] < A[ minimum ]) {
              minimum = j;
            }
          }

          tmp = A[ i ];
          A[ i ] = A[ minimum ];
          A[ minimum ] = tmp;
        }
      }

    Given an array [7, 5, 4, 2]:

          7 and 2 are swapped
                /       \            sorted       unsorted
      Step 1 - [7, 5, 4, 2]     =>      [2]       [5, 4, 7]

          5 and 4 are swapped  
                   / \               sorted       unsorted
      Step 2 - [2, 5, 4, 7]     =>      [2, 4]     [5, 7]
      
          No swap needed
                      / \            sorted       unsorted
      Step 3 - [2, 4, 5, 7]     =>      [2, 4, 5]    [7]     =>      [2, 4, 5, 7]

    *Time Complexity of selection sort is O(n**2)


)Insertions Sort
    Insertion sort method creates a sorted array by making an iteration for each item in the array, and 
    putting it in it's ordered place upon insertion.
      -This can be done by starting at the end (ex: array end holding the highest values) and comparing
        the number being added against each number moving down until it is equal or more-than the value 
        in the current index. When the value being inserted in inserted in the middle, each value to one
        side or the other gets shifted one place, and the the end value is extended.

        Ex:

          void insertion_sort( int A[ ] , int n )
          {
            for (int i = 0; i < n; i++)
            {
              int temp = A[i];
              int j = i;

              while (j > 0 && temp < A[j-1])
              {
                A[j] = A[j-1];
                j = j-1;
              }
            A[j] = temp;

            }
          }

    Given an array [7, 4, 5, 2]:

          No element left of 7            No changes
      index[0]  |                            |
      Step 1 - [7, 4, 5, 2]     =>      [7, 4, 5, 2]     

              4 < 7 so  move left until array end or lesser value found
      index[1]   / |                         
      Step 2 - [7, 4, 5, 2]     =>      [4, 7, 5, 2]
      
                  5 < 7 so cycle left until end or lesser val found
      index[2]     / |                         
      Step  - [4, 7, 5, 2]     =>      [4, 5, 7, 2]

                    2 < 7 so cycle left until end or lesser val found
      index[3]         / |                         
      Step 1 - [4, 5, 7, 2]     =>      [2, 4, 5, 7]

    *Time Complexity of selection sort is O(n**2) Since in worst case, each element will be compared
      to each item in the array.

)Merge Sort
)Quick Sort
)Radix Sort
)Heap Sort
)Bucket Sort

